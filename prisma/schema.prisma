// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["multiSchema", "clientExtensions"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model Avatar {
  id     String @id @default(uuid())
  url    String
  user   User?  @relation()
  userId String @unique

  @@index([userId])
}

model User {
  id           String       @id @default(uuid())
  name         String       @unique
  email        String       @unique
  // phone_number Float? @unique  ===> we can't use this line because sometime our phone number is null and then we can't compare it
  phone_number Float?
  address      String?
  password     String
  avatar       Avatar?      @relation(fields: [avatarId], references: [id])
  avatarId     String?      @unique
  role         Role         @default(User)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ProfileUser  ProfileUser?
  Article      Article[]
  Project      Project[]

  @@unique([email, phone_number], name: "unique_email_phone_number")
}

model TechLanguages {
  id      String        @id @default(uuid())
  name    String        @unique
  icon    String        @unique
  profile ProfileUser[]
}

model Link {
  id          String        @id @default(uuid())
  name        String        @unique
  icon        String        @unique
  profile     ProfileUser[]
  LinkProfile LinkProfile[]
}

model LinkProfile {
  id            String       @id @default(uuid())
  link          Link?        @relation(fields: [linkId], references: [id])
  linkId        String?
  linkUrl       String
  profileUser   ProfileUser? @relation(fields: [profileUserId], references: [id])
  profileUserId String?
}

model Experience {
  id            String       @id @default(uuid())
  name          String
  function      String
  from          DateTime
  to            DateTime?
  ProfileUser   ProfileUser? @relation(fields: [profileUserId], references: [id])
  profileUserId String?
}

model ProfileUser {
  id           String          @id @default(uuid())
  title        String
  description  String
  about        String?
  techs        TechLanguages[]
  links        Link[]
  user         User?           @relation(fields: [userId], references: [id])
  userId       String?         @unique
  linkProfiles LinkProfile[]
  experiences  Experience[]
  Contact      Contact?
  ProjectPage  ProjectPage?
  Curriculum   Curriculum?
}

model Curriculum {
  id            String       @id @default(uuid())
  url           String
  profileUser   ProfileUser? @relation(fields: [profileUserId], references: [id])
  profileUserId String       @unique
}

model Contact {
  id            String       @id @default(uuid())
  title         String
  description   String
  profileUser   ProfileUser? @relation(fields: [profileUserId], references: [id])
  profileUserId String       @unique
}

model ProjectPage {
  id            String       @id @default(uuid())
  title         String
  description   String
  profileUser   ProfileUser? @relation(fields: [profileUserId], references: [id])
  profileUserId String       @unique
}

model Article {
  id          String   @id @default(uuid())
  content     String?
  title       String
  description String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Project {
  id          String   @id @default(uuid())
  content     String?
  title       String
  description String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images       Image[]
}
